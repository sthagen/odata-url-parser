cOMpUTE=	[]	Le	f_(_=@_,_=		 	  ["\n\"",		- 	 	{	}	ne _()/$count MOD -'' MUL '' and '' lt CASt(Edm.Binary) oR '' LE 	cast( 		_._) 		LT	  _._()/_ dIv ''	 ])/$filter((	(	NoT L/@_._#_ sUB 	 	$root/P) diV (@_ 	 	  nE	GeOgRAphY'SrID=6;liNeStrIng(1 3,5 8)' mUl CEiliNg('') ADd '' In ('')   aNd		 -'' Sub '' GE '' oR '' And				 	 _._(_=@_,_=@_) Eq  mIndatETIme() Div '' NE '' OR '' aNd cAst(Edm.Binary) ADd ''		 ) SuB ISOf(	-{} dIVBY '' Has '0' OR ''	 or cASt(Edm.Binary) DIvBY '' HaS '7', P__)  le - $root/_/ MoD '' and '' aDD	Not '' anD ''	 Eq	$root/_ GT '' oR ''  oR  -'' AnD '' 	AND	nOt  -'' Ne '' oR '' OR ''	haS	 	z.U._91'Z,4995,VY_,G__,0,7'	and	 	 '2,2,1'		 	AND  cAST( '',Edm.Binary ) aNd '' Le			 CAsT(    	Collection(q.J6)) DivbY	$root/f(_='',_=@_,_='',_='',_='') MOD	 ['']	DIVbY  noT '' Or ''	 Or	not '' Div '' LT '' 	Le _	 lT -'' 	ne			    tRIm(	 DUraTIon'p' ADd MiNdAtETIme() mUl '')	moD	  _	 oR _()	  	aNd	_._(_=@_) MoD CasT(Edm.Binary) AnD '')	 	mul	 ( 	caST(ZK.Z_M()/__/_()	LE _ mOD	_() Gt '' in [] eq '' AND ''  aND ISoF(Edm.Binary) dIVBY '' OR ''	oR $root/_/ ge CASt(Edm.Binary) mul '' LT '' Or ''	 ,Collection(_J) 	)		   And CAst(_._ 	)	gT {} In ('') 	 ))  and			{    }  	 LE Cast({ 	  }		dIv 		 	(cAst( Collection(v6.__8_))     GE noT	   $root/__/_/_	 le	_() oR	cAst(Edm.Binary) gt ''		 	ANd	  isoF(_._) 		SUb	 	isoF(casT(Edm.Binary) DIv '' HaS '6' And '' ,Collection(_)	 ) moD '' dIvbY '' Ge '' aND ''	 	lt		   Isof(	 isOF(Edm.Binary) Mod '' lE '' , Edm.Binary) IN (''))	 	  aNd	CasT( CaSt( TOtaLOfFSeTmINUTes('') MOD '',	 	 Collection(_) ) 		 ANd 	isof('',Edm.Binary) ADd '' ,Collection(___._O_))	In not		not '' MUL '' gE ''	dIVbY	 -'' gt ''	  Le $root/_/_ le '' or '',  _._)	AND 	_4O.k.Ca1.j3.__b(__8=@_,TQ=@P) AND $root/m_d/:/o_K_/hY	DiV		caSt(NoT  	 iSof(	  $root/_ mOd '' nE '' or ''   ,	Collection(_)) oR   isOF(Edm.Binary) LE '' aND ''		Add  	   SECONd(cAST(Edm.Binary) mOd '' lt '' or '') Mul   CAsT('',Edm.Binary) adD '' lt ''  le lENGth('') mul '' ge '' or 	 ('') gt ''  gT	-GeOmetry'sriD=4;MulTIlInESTriNG()' MUL '' Gt '' oR ''		dIv	 ('') dIvBy ''	lE	 Not '' lt '' or '',Collection(t._)			)	iN	 			( 		  cAST(_)	Mul	$root/_/_ mUl '' NE '' Or ''    )	eQ	_/_  MuL NOt '' And ''	 AnD -'' hAS '8' AnD  not	__(_=@_,_=@_)	 haS '3,6'  And	 NOt '' diVBy ''		  	or -cASt(Edm.Binary) DIv '' LT '' aND '' GE ('') DIv '' ge '' And	 ["",- $root/_ sUB '' Or '' AnD ''	] 	nE		nOT 	_._._._()/_ gt  []	 Or MINdAtETIMe() mul '' In ('') and ''  	Divby NOt	('') anD not '' ge '' OR ''	aND	caST({} MuL $it aDd '' lT ('')	,		_			  )	 	ADd   _/_ hAs		'0'		As	 _